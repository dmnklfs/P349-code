#include "Config.h"

// in order to set the coincidence between detectors see SingleEvent::was_correct_event() in SingleEvent.cpp
// in order to provide specific conditions for certain detector see function was_correct_event() in appropriate .cpp file

Config::Config()
{
	// simple calibration
	no_of_iterations_in_simple_calibration = 1;
	no_of_bins_in_simple_calibration = 200;

	// here hit = one correct singal (leading and trailing edge corresponding to TWO hits from easyparser)
	start_hits = 1;
	start_time_min = -1500;
	start_time_max = 1500;

	TOF_hits  = 1; // if -1 is set - any number of hits is accepted
	TOF_time_min = -1500;
	TOF_time_max = 1500;
	TOF_element_min = 1;
	TOF_element_max = 10;

	Intermediate_hits  = -1; // if -1 is set - any number of hits is accepted
	Intermediate_time_min = -1500;
	Intermediate_time_max = 1500;
	Intermediate_element_min = 1;
	Intermediate_element_max = 16;

	// ---------DRIFT CHEMBER D1---------
	// detector position (all in cm)
	D1_half_x_dim = 0.5*193.5; // 0.5 * detector dimensions
	D1_half_z_dim = 0.5*19.2;
	D1_x_lab_position = 2;
    D1_z_lab_position = 138.2;
	D1_z_offset = 0; // up to the beginning of the detector (not: 1st layer)
	D1_x_offset = 0;
	D1_y_rotation_angle = (0)*3.14/180; // rad
	track_angle_min = 60;
	track_angle_max =120;
	// layers "offsets" - distances drom the frame
	D1_layer_wire_frame_offset[0] = 3;	// x
	D1_layer_wire_frame_offset[1] = 5;
	D1_layer_wire_frame_offset[2] = 0;
	D1_layer_wire_frame_offset[3] = 0;
	D1_layer_wire_frame_offset[4] = 0;
	D1_layer_wire_frame_offset[5] = 0;
	D1_layer_wire_frame_offset[6] = 3;
	D1_layer_wire_frame_offset[7] = 5;
	distance_to_1st_layer = 3.3;	// z
	distance_between_wires = 4;		// x
	distance_between_layers = 1.8;	// z

	// drift time offset
	for (int i = 0; i < 120; i++) // for now, later: different vectors for all layers
	{
		D2_drift_time_offset.push_back(0);
		HEX_drift_time_offset.push_back(0);
	}

	// this should be bear from somewhere
	double _D1_L1_drift_time_offset[41] =  {40, 40, 40, 46, 46, 46, 46, 46, 46, 46, 
											46, 46, 46, 40, 40, 40, 40, 40, 40, 40,
											34, 34, 34, 46, 40, 40, 40,  4, -2,  4,
											16, 10, 16, 16,  4, 16, 10, 10, 10, 10, 10};
	double _D1_L2_drift_time_offset[41] =  {28, 28, 28, 34, 28, 34, 34, 34, 34, 34,
											28, 28, 28, 28, 40, 40, 40, 40, 40, 40,
											40, 34, 34, 40, 46, 40, 40, 40, 16, 16,
											16, 10, 16, 16,  4, 16, 10, 10, 10 ,10 ,10};
	double _D1_L7_drift_time_offset[41] =  {28, 28, 46, 34, 28, 28, 28, 28, 28, 28,
											28, 28, 28, 40, 40, 40, 40, 40, 34, 34,
											34, 34, 34, 40, 40, 40, 40, 40, 40, 40,
											40, 40, 40, 40, 34, 40, 34, 40, 34, 28, 28};
	double _D1_L8_drift_time_offset[41] =  {28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
											28, 28, 28, 28, 34, 40, 40, 40, 34, 34,
											40, 34, 34, 34, 34, 34, 40, 40 ,40, 40,
											40, 40, 40, 40, 40, 40, 34, 40, 40, 40, 40};

	for (int i = 0; i < 41; i++)
	{
		std::cout << i << std::endl;
		D1_L1_drift_time_offset.push_back(_D1_L1_drift_time_offset[i]); // for now constant value
		D1_L2_drift_time_offset.push_back(_D1_L2_drift_time_offset[i]);
		D1_L7_drift_time_offset.push_back(_D1_L7_drift_time_offset[i]);
		D1_L8_drift_time_offset.push_back(_D1_L8_drift_time_offset[i]);
	}

	// time-space calibration - shoul be read from somewhere
	double D1_drift_time[201]=
    {   0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 
    	60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 
    	114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 
    	162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207, 
    	210, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 243, 246, 249, 252, 255, 
    	258, 261, 264, 267, 270, 273, 276, 279, 282, 285, 288, 291, 294, 297, 300, 303, 
    	306, 309, 312, 315, 318, 321, 324, 327, 330, 333, 336, 339, 342, 345, 348, 351, 
    	354, 357, 360, 363, 366, 369, 372, 375, 378, 381, 384, 387, 390, 393, 396, 399, 
    	402, 405, 408, 411, 414, 417, 420, 423, 426, 429, 432, 435, 438, 441, 444, 447, 
    	450, 453, 456, 459, 462, 465, 468, 471, 474, 477, 480, 483, 486, 489, 492, 495, 
    	498, 501, 504, 507, 510, 513, 516, 519, 522, 525, 528, 531, 534, 537, 540, 543, 
    	546, 549, 552, 555, 558, 561, 564, 567, 570, 573, 576, 579, 582, 585, 588, 591, 594, 597, 600

    };

    /*double D1_drift_time[201]=
    { 
    	0.000, 0.379, 1.097, 1.941, 2.772, 3.656, 4.474, 5.311, 6.355, 7.279, 8.229, 9.153,
    	10.170, 11.234, 12.231, 13.208, 14.232, 15.389, 16.539, 17.728, 18.932, 20.228, 21.597, 
    	22.940, 24.243, 25.785, 27.301, 29.002, 30.372, 32.133, 33.735, 35.643, 37.358, 39.492,
    	41.293, 43.367, 45.202, 47.442, 49.469, 51.763, 53.936, 56.097, 58.536, 61.042, 63.103,
		65.616, 68.108, 70.787, 72.961, 75.467, 77.980, 80.745, 83.510, 86.322, 88.868, 91.746,
		94.492, 97.057, 100.235, 103.253, 105.659, 108.564, 111.502, 114.347, 117.618, 120.449,
		123.693, 126.591, 129.583, 133.119, 135.904, 138.869, 142.379, 145.796, 148.175, 150.575,
		154.623, 157.435, 161.138, 164.441, 167.645, 170.809, 174.133, 177.989, 180.734, 183.712,
		187.654, 190.731, 194.693, 197.558, 200.603, 203.999, 207.695, 212.056, 215.047, 217.965,
		221.083, 225.450, 228.787, 231.745, 235.036, 239.390, 242.920, 246.143, 249.979, 253.675,
		256.706, 260.442, 263.613, 268.326, 271.649, 275.405, 278.735, 283.601, 286.220, 289.677,
		294.097, 297.388, 301.290, 305.158, 309.320, 313.414, 316.173, 320.387, 323.571, 328.118,
		331.296, 335.510, 339.638, 343.660, 348.153, 351.331, 355.066, 359.493, 363.090, 368.673,
		372.609, 375.208, 378.731, 383.570, 387.525, 391.108, 396.153, 398.686, 403.937, 408.458,
		412.619, 416.654, 421.068, 424.611, 428.619, 433.731, 436.921, 441.083, 446.214, 450.794,
		454.184, 459.343, 463.597, 468.749, 472.239, 476.134, 480.488, 484.370, 489.329, 492.865,
		500.084, 502.643, 506.771, 511.478, 516.975, 520.272, 523.762, 529.638, 533.660, 537.854, 
		540.832, 545.844, 549.534, 553.515, 556.001, 560.761, 563.207, 568.046, 570.453, 574.687,
		577.878, 579.240, 583.648, 584.206, 588.135, 589.145, 590.641, 591.817, 594.689, 595.513,
		598.245, 598.418, 599.335, 600.000, 600.000
    };*/

    //double D1_drift_time[201]= {0.000, 0.366, 1.060, 1.876, 2.680, 3.534, 4.325, 5.134, 6.143, 7.036, 7.955, 8.848, 9.831, 10.859, 11.823, 12.768, 13.758, 14.876, 15.987, 17.137, 18.301, 19.554, 20.877, 22.175, 23.435, 24.925, 26.391, 28.035, 29.359, 31.062, 32.611, 34.455, 36.113, 38.175, 39.917, 41.922, 43.695, 45.860, 47.820, 50.037, 52.138, 54.227, 56.585, 59.008, 61.000, 63.428, 65.838, 68.428, 70.529, 72.951, 75.380, 78.053, 80.727, 83.445, 85.906, 88.688, 91.342, 93.822, 96.894, 99.811, 102.137, 104.945, 107.785, 110.536, 113.697, 116.434, 119.570, 122.372, 125.263, 128.682, 131.374, 134.240, 137.633, 140.936, 143.236, 145.556, 149.469, 152.187, 155.766, 158.960, 162.057, 165.116, 168.329, 172.056, 174.709, 177.588, 181.399, 184.374, 188.203, 190.973, 193.916, 197.199, 200.772, 204.987, 207.879, 210.700, 213.714, 217.935, 221.161, 224.021, 227.201, 231.410, 234.822, 237.939, 241.646, 245.219, 248.149, 251.760, 254.826, 259.381, 262.594, 266.225, 269.444, 274.148, 276.679, 280.021, 284.294, 287.475, 291.247, 294.986, 299.009, 302.967, 305.634, 309.708, 312.786, 317.181, 320.252, 324.326, 328.317, 332.204, 336.548, 339.620, 343.231, 347.510, 350.987, 356.384, 360.188, 362.701, 366.106, 370.784, 374.608, 378.071, 382.948, 385.397, 390.473, 394.842, 398.865, 402.765, 407.032, 410.457, 414.332, 419.273, 422.357, 426.380, 431.341, 435.768, 439.045, 444.031, 448.144, 453.124, 456.497, 460.263, 464.472, 468.224, 473.018, 476.436, 483.415, 485.889, 489.879, 494.428, 499.743, 502.930, 506.303, 511.984, 515.871, 519.926, 522.805, 527.650, 531.216, 535.065, 537.468, 542.069, 544.434, 549.111, 551.438, 555.531, 558.615, 559.932, 564.193, 564.732, 568.530, 569.507, 570.953, 572.090, 574.866, 575.663, 578.304, 578.471, 579.357, 580.000, 580.000};

    // 0.00, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10
    double D1_distance[201]=
    {   0.00, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13, 
    	0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 
    	0.28, 0.29, 0.30, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.40, 0.41, 
    	0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.50, 0.51, 0.52, 0.53, 0.54, 0.55, 
    	0.56, 0.57, 0.58, 0.59, 0.60, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 
    	0.70, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.80, 0.81, 0.82, 0.83, 
    	0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.90, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 
    	0.98, 0.99, 1.00, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.10, 1.11, 
    	1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18, 1.19, 1.20, 1.21, 1.22, 1.23, 1.24, 1.25, 
    	1.26, 1.27, 1.28, 1.29, 1.30, 1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.38, 1.39, 
    	1.40, 1.41, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49, 1.50, 1.51, 1.52, 1.53, 
    	1.54, 1.55, 1.56, 1.57, 1.58, 1.59, 1.60, 1.61, 1.62, 1.63, 1.64, 1.65, 1.66, 1.67, 
    	1.68, 1.69, 1.70, 1.71, 1.72, 1.73, 1.74, 1.75, 1.76, 1.77, 1.78, 1.79, 1.80, 1.81, 
    	1.82, 1.83, 1.84, 1.85, 1.86, 1.87, 1.88, 1.89, 1.90, 1.91, 1.92, 1.93, 1.94, 1.95, 
    	1.96, 1.97, 1.98, 1.99, 2.0
    };
    
    // calibration should be read from the file
	for (int i = 0; i < 201; i++)
	{
		D1_L1_calibration_times.push_back(D1_drift_time[i]);
		D1_L1_calibration_distances.push_back(D1_distance[i]);
		D1_L2_calibration_times.push_back(D1_drift_time[i]);
		D1_L2_calibration_distances.push_back(D1_distance[i]);
		D1_L7_calibration_times.push_back(D1_drift_time[i]);
		D1_L7_calibration_distances.push_back(D1_distance[i]);
		D1_L8_calibration_times.push_back(D1_drift_time[i]);
		D1_L8_calibration_distances.push_back(D1_distance[i]);
	}
	
	
	for (int i = 0; i < 8; i++)
	{
		if (i==0||i==1||i==6||i==7)
		//if (i==0||i==1)
		//if (true)
		{
			D1_layer_min_hits[i] = 1;
			D1_layer_max_hits[i] = 1;
			D1_drift_time_min[i] = 0;
			D1_drift_time_max[i] = 600;
		}
		else
		{
			D1_layer_min_hits[i] = -1;
			D1_layer_max_hits[i] = -1;
			D1_drift_time_min[i] = -1500;
			D1_drift_time_max[i] = 1500;
		}
	}
	
	// ---DRIFT CHEMBER D2---
	for (int i = 0; i < 6; i++)
	{
		D2_layer_min_hits[i] = 1;
		D2_layer_max_hits[i] = 1000;
		D2_drift_time_min[i] = -1500;
		D2_drift_time_max[i] = 1500;
	}

	// ---HEX---
	for (int i = 0; i < 7; i++)
	{
		HEX_layer_min_hits[i] = 1;
		HEX_layer_max_hits[i] = 1000;
		HEX_drift_time_min[i] = -1500;
		HEX_drift_time_max[i] = 1500;
	}

	// ---FIBER HODOSCOPE---
	// ranges of elements
	element_V_min = 0;
	element_V_max = 70;
	element_H_min = 0;
	element_H_max = 70;
	element_D_min = 0;
	element_D_max = 160;
	hit_V_min = 1;
	hit_V_max = 100;
	hit_H_min = 1;
	hit_H_max = 100;
	hit_D_min = 1;
	hit_D_max = 100;
}

Config::~Config()
{

}
